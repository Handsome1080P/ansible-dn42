# This configuration assumes the following:
# - Tunnels to other networks start with "dn42"
# - Tunnels to other nodes in the same network start with "igp"
# - Tunnels to simple clients start with "cl"

# Restrict traffic from our network to IGP & dummy interfaces
-A INPUT  -s {{ my_cidrs }} -i dn42+ -j REJECT
-A OUTPUT -d {{ my_cidrs }} -o dn42+ -j REJECT

# BGP sessions
-A INPUT -p tcp --dport 179 -i dn42+ -j ACCEPT
-A INPUT -p tcp --sport 179 -i dn42+ -j ACCEPT
-A INPUT -p tcp --dport 179 -i igp+ -j ACCEPT
-A INPUT -p tcp --sport 179 -i igp+ -j ACCEPT

{# This is dynamically generated because I don't like having larger than needed port ranges open. #}
{# Downside: more coupling in the code here. #}
## WireGuard - IGP links
{% for igp_neighbour in igp_neighbours.get(inventory_hostname, []) | sort %}
{% set igp_wg_port = igp_wg_ports[inventory_hostname][igp_neighbour] %}
# {{ igp_neighbour }}
-A INPUT -p udp --dport {{ igp_wg_port }} -i {{ ansible_default_ipv4.interface | default(ansible_default_ipv6.interface) }} -j ACCEPT
{% endfor %}

{% macro _maybe_forward_rule(conf_block) -%}
{% if conf_block.get('iptables_free_forward') -%}
-A FORWARD -i {{ conf_block.name }} -j ACCEPT
-A FORWARD -o {{ conf_block.name }} -j ACCEPT
{% endif -%}
{% endmacro -%}

## WireGuard peers
{% for wg_peer in wg_peers|default([]) -%}
{%- if wg_peer.get('port') -%}
# {{ wg_peer.name }}
-A INPUT -p udp --dport {{ wg_peer['port'] }} -i {{ ansible_default_ipv4.interface | default(ansible_default_ipv6.interface)}} -j ACCEPT
{% endif -%}
{{ _maybe_forward_rule(wg_peer) }}
{%- endfor %}

## OpenVPN peers
{% for ovpn_peer in ovpn_peers|default([]) -%}
{%- if ovpn_peer.get('port') -%}
# {{ ovpn_peer.name }}
-A INPUT -p {{ 'tcp' if ovpn_peer.get('proto', 'udp').startswith('tcp') else 'udp' }} --dport {{ ovpn_peer['port'] }} -i {{ ansible_default_ipv4.interface }} -j ACCEPT
{% endif -%}
{{ _maybe_forward_rule(ovpn_peer) }}
{%- endfor %}

{% if gre_peers | default([]) | length > 0 -%}
## GRE peers
-A INPUT -p gre -j ACCEPT
{%- endif %}

## OSPF (internal only)
-A INPUT -p ospf -i igp+ -j ACCEPT

# looking glass proxy (internal only)
-A INPUT -p tcp --dport 5000 -s {{ my_cidrs }} -j ACCEPT

{% if netdata_proxy_port | default(0) -%}
{% set _netdata_v4 = netdata_ips | default([]) | ansible.utils.ipv4 -%}
{% set _netdata_v6 = netdata_ips | default([]) | ansible.utils.ipv6 -%}
{% if _netdata_v4 and aftype == 4 %}
# netdata
-A INPUT -p tcp --dport {{ netdata_proxy_port }} -s {{ ','.join(_netdata_v4) }} -j ACCEPT
{% elif _netdata_v6 and aftype == 6 %}
# netdata
-A INPUT -p tcp --dport {{ netdata_proxy_port }} -s {{ ','.join(_netdata_v6) }} -j ACCEPT
{% endif %}
{% endif %}

# Anycast DNS within dn42
-A INPUT -p udp --dport 53 -i dn42+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i dn42+ -j ACCEPT
-A INPUT -p udp --dport 53 -i igp+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i igp+ -j ACCEPT
-A INPUT -p udp --dport 53 -i cl+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i cl+ -j ACCEPT
# Also allow local bridges for VMs and containers
-A INPUT -p udp --dport 53 -i lxcbr+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i lxcbr+ -j ACCEPT
-A INPUT -p udp --dport 53 -i vmbr+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i vmbr+ -j ACCEPT

{% if aftype == 6 -%}
{% set _allowed_ips = 'fd00::/8,ff00::/8,fe80::/64' %}
{% else %}
{% set _allowed_ips = '172.20.0.0/14,10.0.0.0/8,172.31.0.0/16,169.254.0.0/16' %}
{% endif -%}

# Block non-dn42 source IPs from going through tunnels (prevent IP spoofing)
-N DN42INGRESSFILTER
-A INPUT -i dn42+ -j DN42INGRESSFILTER
-A INPUT -i igp+ -j DN42INGRESSFILTER
-A INPUT -i cl+ -j DN42INGRESSFILTER
-A FORWARD -i dn42+ -j DN42INGRESSFILTER
-A FORWARD -i igp+ -j DN42INGRESSFILTER
-A FORWARD -i cl+ -j DN42INGRESSFILTER

-A DN42INGRESSFILTER -s {{ _allowed_ips }} -j RETURN
-A DN42INGRESSFILTER -m limit --limit 5/min -j LOG --log-prefix "[dn42] BAD SRC IP " --log-level 4
-A DN42INGRESSFILTER -j REJECT

# Allow forwarding between dn42 and IGP links
-A FORWARD -i dn42+ -o dn42+ -j ACCEPT
-A FORWARD -i igp+ -o igp+ -j ACCEPT
-A FORWARD -i igp+ -o dn42+ -j ACCEPT
-A FORWARD -i dn42+ -o igp+ -j ACCEPT
-A FORWARD -i dn42+ -m limit --limit 5/min -j LOG --log-prefix "[dn42] BAD DST IFACE " --log-level 4
-A FORWARD -i dn42+ -j REJECT

# Clients: only allow outgoing connections to the rest of dn42
-A FORWARD -i cl+ -o dn42+ -j ACCEPT
-A FORWARD -i cl+ -o igp+ -j ACCEPT
-A FORWARD -s {{ my_cidrs }} -o cl+ -j ACCEPT
-A FORWARD -o cl+ -m state --state ESTABLISHED,RELATED -j ACCEPT
-A FORWARD -o cl+ -j REJECT

{# Catch all rules are commented out here to prevent clashes with machine-specific rules, but you should enable something like these!
-A INPUT -j DROP
-A FORWARD -j REJECT
#}
